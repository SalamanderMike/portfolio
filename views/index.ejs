<!doctype html>
<html ng-app="app">
	<head>
		<title ng-bind="title"></title>
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>

		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

		<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>


		<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous">



		<link 	href="/public/css/style.css" rel="stylesheet" type="text/css"/>
		<script src="/dist/vendor.bundle.js"></script>
		<script src="/dist/app.bundle.js"></script>
	</head>
	<body ng-view>
		<div id="gradient"></div>
		<div id="menu-background">
			<section id="menu" role="menu">
				<div class="m-icon" tooltip-placement="right" uib-tooltip="Michael McClure"></div>
				<div class="menu-icons" tooltip-placement="right" uib-tooltip="Home" ng-mouseover="flicker()">
					<a href="#home"><i class="fa fa-home" aria-hidden="true"></i></a>
				</div>
				<div class="menu-icons" tooltip-placement="right" uib-tooltip="Code Philosophy">
					<a href="#code"><i class="fa fa-cogs" aria-hidden="true"></i></a>
				</div>
				<div class="menu-icons" tooltip-placement="right" uib-tooltip="Code Example">
					<a href="#example"><i class="fas fa-code" aria-hidden="true"></i></a>
				</div>
				<div class="menu-icons" tooltip-placement="right" uib-tooltip="About Me">
					<a href="#about"><i class="fa fa-user-circle" aria-hidden="true"></i></a>
				</div>
				<div class="menu-icons" tooltip-placement="right" uib-tooltip="Culture Fit" ng-mouseover="flicker()">
					<a href="#culture"><i class="fa fa-leaf" aria-hidden="true"></i></a>
				</div>
				<div class="menu-icons" tooltip-placement="right" uib-tooltip="Contact" ng-mouseover="flicker()">
					<a href="#contact"><i class="fa fa-paper-plane" aria-hidden="true"></i></a>
				</div>
				<div class="social-icons" tooltip-placement="right" uib-tooltip="LinkedIn">
					<a href="https://www.linkedin.com/in/michael-mcclure-69494655/">
						<i class="fab fa-linkedin" aria-hidden="true"></i>
					</a>
				</div>
			</section>
		</div>
		

	<section id="content">
		<section id="home">
	<div class="greeting" ng-mouseover="flicker()">
		<div>Hi,</div>
		<div>I'm Mike,</div>
		<div>Web Developer.</div>			
	</div>
	<div class="subgreeting" ng-mouseover="flicker()">Web Developer  /  Full Stack  /  Front End</div>
	<div class="directions color-shadow" ng-mouseover="flicker()">Scroll Or Use The Navigation Strip</div>
	<div class="arrow-small">
		<div class="glow-small" ng-show="glow"></div>
	</div>
	<div class="arrow-large">
		<div class="glow-large" ng-show="glow"></div>
	</div>
</section>

		<section id="code">
	<div>
		<div class="photos left ux">
			<div class="photo-glow"></div>
		</div>
		<br>
		<h1 class="headings">User Experience</h1>
		<p class="p-justified">Look at every line of code imagining yourself as a first-time user. Contemplate if the interface is intuitive, pleasant, and would draw you to return. The goal is to optimize user experience such as focusing on load speed by caching data or preloading. If preloading isn’t possible, distract the user with something they like. In some cases, that could be a floating tennis ball.</p>
	</div>
	<br>
	<div>
		<div class="photos right dry">
			<div class="photo-glow"></div>
		</div>
		<br><br>
		<h1 class="headings p-right">DRY Code</h1>
		<p class="p-justified">Taking the ring to Mordor and second-breakfast doesn’t always need to be two separate functions. Striving to code efficiently is the ever guiding quest of a code warrior. Object literals in JavaScript or Classes in Ruby are two classic methods used to follow the acronym of "Don't Repeat Yourself."</p>
	</div>
	<br><br>
	<div>
		<div class="photos left bug">
			<div class="photo-glow"></div>
		</div>
		<br>
		<h1 class="headings">Testing</h1>
		<p class="p-justified">I’m pretty sure most web developers use a browser's DOM just as often as a text editor when developing code. Testing and fixing bugs can easily comprise 80% of development. For smaller projects, the DOM is your best friend. For more complex undertakings that will have many iterations, a testing framework (like Mocha) is an indispensable tool. It's responsible and good practce to test every step of the way.</p>
	</div>
	<br><br>
	<div>
		<div class="photos right help">
			<div class="photo-glow"></div>
		</div>
		<br>
		<h1 class="headings p-right">Getting Help</h1>
		<p class="p-justified">Every good developer bookmarks resources to find answers to code problems that stump them. However, sometimes the fastest way to get over a hurdle is to respectfully ask the coder sitting next to you for a hand. Become extremely familiar with your digital resources, but don't be afraid to utilize your team, as well. Helping each other out builds positive relationships.</p>
	</div>

</section>

		<section id="example">
	<div class="arrow-small" ng-mouseover="flicker()">
		<div class="glow-small" ng-show="glow"></div>
	</div>
	<h1 class="headings">Code</h1>
	<h1 class="headings">Example</h1>
	<br>
	<br>
	<br>
	<br>
	<br>
	<br>
	<p class="p-justified">As an example of my coding thought process, here’s how I met the challenge of creating flickering neon arrows on this page. </p>
	<br>
	<p class="p-justified"><strong>Goal:</strong> 
		<br>Have neon arrows that flicker randomly and constantly as fringe, atmospheric content. </p>
	<br>
	<p class="p-left" ng-mouseover="flicker()"><strong>Obstacles:</strong>
		<br>1) Create glowing and non-glowing graphics for the arrows.
		<br>2) Find a way to flicker the graphic at random intervals that are not annoyingly predictable.
		<br>3) Make the flicker constant without introducing memory leaks.
	</p>
	<br>
	<p class="p-justified"><strong>Web Languages:</strong>
		<br>HTML5, CSS3, JavaScript, and AngularJS 1.7</p>
	<br>
	<p class="p-justified">I first dove into photoshop to create the neon arrows, and separately, their glow. For the glow, I copied the finished arrow into a new document and blurred it with the Gaussian Blur filter. This had the effect of maintaining the same color profile, while making the lines of the arrow diffuse like a glow. I then saved the diffused arrow as a transparent .png.</p>
	<div class="photo-glow arrows-box">
		<div class="example-arrow"></div>
		<div class="example-glow"></div>
	</div>
	<br>
	<br>
	<br>

	<p class="p-justified">In HTML, I overlaid the images as a div within a div. I chose this DRY method instead of using CSS to place them in the exact same location. This way, I wouldn’t need to calculate where the glow needed to be should I choose to change the arrow's location. Using AngularJS’ ng-show/hide function, I hid the glow graphic. A JavaScript function will be in charge of revealing the glow graphic at the correct timing.</p>
	<div class="photo-glow example-div"></div>
	<br>
	<br>
	<br>

	<p class="p-justified">With my View and Model in place, the arrow needs a JavaScript Controller. Human brains are pattern sensitive; a recurring flash on the webpage will quickly become irritating if not varied randomly. In order to keep the flicker pleasant, I needed to manufacture a simple interval pattern that changed constantly. After experimentation, I settled on a motif of two quick, to one long interval. I put this pattern into an array as five interval values. Two of those values would represent a non-glow while three of them, a glow, thus creating a flicker of off and on.</p>
	<div class="photo-glow example-array"></div>
	<br>
	<br>
	<br>

	<p class="p-justified">From here, I needed to craft a method, called intervals( ), to redistribute these interval values into a random order every time the flicker was called. I chose to use a Math.random function on the array’s index, then push the reordered values into another array called “duration”. In this way, we have a constantly varying pattern of the same values.</p>
	<div class="photo-glow example-intervals"></div>
	<br>
	<br>
	<br>

	<p class="p-justified">For the flicker effect, I would need to draw on AngularJS’ version of JavaScript's Promise ($q) and Timeout ($timeout) methods. $q has served me very well in creating an island of synchronicity within JavaScript’s asynchronous universe.</p>
	<br>
	<p class="p-justified">I attached a flicker( ) function to AngularJS’ $scope making it accessible from HTML. When called, it invokes my intervals( ) function for an array of randomly distributed duration values. $q ensures those values are received before proceeding to call an anonymous function of five nested $timeouts. Each Timeout pauses for several milliseconds according to the values received from the duration array. The arrow glow switches on, then runs through each duration value switching off, then on again until finally switching off at the end of its run, prepared to be called again.</p>
	<div class="photo-glow example-flicker"></div>
	<br>
	<br>
	<br>

	<p class="p-justified">Now that the flicker function is set, it needs a way to be called. I could have used JavaScript’s Interval method to call the flicker function every twenty seconds or so. However, Interval has a nasty tendency to create memory leaks and I try to avoid it whenever I can. Thankfully, I’ve always figured out a workaround to Interval. It’s not too difficult if you put some thought into it. In this case, I realized that the natural flow of the user could unwittingly trigger the function. If I create mouseover events in choice locations across the page, the user will trigger the flicker as they explore my content. To the user, it would seem that the flicker happens randomly, outside of their control, but as they stop moving their mouse, the flicker stops as well. No memory leaks, no unnecessary processing power when idle.</p>
	<br>
	<p class="p-justified">Feel free to explore some of the mouseover events that call the flicker( )!</p>
	<div class="photo-glow example-mouseovers"></div>
</section>

		<section id="about">
	<div class="photos left me">
		<div class="photo-glow"></div>
	</div>
	<h1 class="headings">Hi!</h1>
	<h1 class="headings">I’m Mike.</h1>
	<p class="p-left">I build websites and also work with teams on large web apps. I’ve been a professional web developer for over three years sharing my skills with cool companies such as Apple, Foxconn, and Fitbit.</p>
	<p class="p-left">I was twelve when I wrote my first program moving green pixels across a black screen. In high school, I discovered the love of logic and algebra that gave me a philosophy of thinking that has shaped my mind ever since. I was one of those geeky, nerdy kids who spent their lunch breaks converting the saga of Star Wars into algebraic formulas, but didn't dare tell anyone. Had there been programmers in my family to encourage me, I would have stayed this course. Instead, I took a multifarious path through performance, music composition, and education before recently coming back to code. As an adult programmer, I hope to help others realize their coding potential and create amazing things.</p>
	<p class="p-left">Coding is a true art form that utilizes multiple disciplines. It's founded in mathematics, but in anticipating user experience, it touches psychology. It's creative, builds an understanding of architecture, leadership, and teamwork.</p>
	<p class="p-left">A couple hundred years from now, I anticipate working alongside robots to better the world .</p>
</section>

		<section id="culture">
	<div class="photos left culture">
		<div class="photo-glow"></div>
	</div>
	<h1 class="headings">Culture Fit</h1>
	<p class="p-left">It would be nice if we got along with our teammates as well as we do with our BFFs. Reality is, we are culturally, physically, and emotionally diverse adults; and ultimately, that reality is <strong>so</strong> much more engaging. When tolerating difficult personalities, keep this as a reminder. And remember, sometimes <i>we're</i> the difficult personality that others are tolerating. </p>
	<p class="p-left">To minimize friction, model the behavior you want to experience from your teammates. Be kindly direct and maintain broad perspective. Ego-attachment to your code is not worth the tension it creates in your team. Keep your humor respectful, and be generous with your help. </p>
	<p class="p-left">You'll likely discover that a positive workplace culture makes every project feel like Christmas. Support that culture and earn your right to be there.</p>
</section>

		<section id="contact">
	<div class="headings center shadow" ng-mouseover="flicker()">
	</div>
	<div class="arrow-small">
		<div class="glow-small" ng-show="glow"></div>
	</div>
	<div class="linkedin color-shadow" ng-mouseover="flicker()">
		<a href="https://www.linkedin.com/in/michael-mcclure-69494655/">
			Contact me through LinkedIn!
		</a>
	</div>
</section>

	</section>
	<script>
		const button = document.querySelector('#button');
		const tooltip = document.querySelector('#tooltip');

		Popper.createPopper(button, tooltip);
	</script>

	</body>
</html>

